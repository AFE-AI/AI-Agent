## https://serper.dev/
from dotenv import load_dotenv # type: ignore
load_dotenv()
import os
import warnings
warnings.filterwarnings('ignore')
from dotenv import load_dotenv # type: ignore
load_dotenv()
from crewai import Agent, Task, Crew, Process
import sys
from crewai_tools import SerperDevTool, ScrapeWebsiteTool, FileReadTool, CSVSearchTool, DirectoryReadTool
SERPER_API_KEY="1f05c1b116c5307226d23de48ed4b2f2fca9469c"

# Web Searching tool
os.environ['SERPER_API_KEY'] = os.getenv('SERPER_API_KEY')

from crewai_tools import SerperDevTool # type: ignore

# Initialize the tool for internet searching capabilities
SerperDevTool = SerperDevTool()

sports_expert = Agent(
    role='sports_expert',
    goal='Gather match results, player statistics, and group standings from reliable sources.',
    tools=[SerperDevTool, ScrapeWebsiteTool()],
    backstory="You're a seasoned sports analyst with an eye for key metrics and data trends.",
    allow_delegation=True
)

news_researcher = Agent(
    role='news_researcher',
    goal='Analyze the collected data to identify trends, standout performances, and critical match outcomes.',
    tools=[FileReadTool(), CSVSearchTool()],
    backstory="A research specialist keen on uncovering insights from complex data sets.",
    allow_delegation=True
)

news_writer = Agent(
    role='news_writer',
    goal='Write detailed articles on standout players and tactical analyses.',
    tools=[FileReadTool()],
    backstory="A talented writer with a knack for creating engaging sports content.",
    allow_delegation=False
)

editor = Agent(
    role='Editor',
    goal='Review all content for accuracy, engagement, and compliance with editorial standards.',
    tools=[],
    backstory="An experienced editor ensuring content meets high standards of quality.",
    allow_delegation=False
)

translator = Agent(
    role='Translator',
    goal='Translate the content into the ideal language.',
    tools=[],
    backstory="A multilingual expert specializing in translating content accurately.",
    allow_delegation=False
)

distribution_manager = Agent(
    role='Distribution Manager',
    goal='Distribute content across multiple platforms like web, social media, and newsletters.',
    tools=[],
    backstory="An expert in content distribution ensuring maximum reach and engagement.",
    allow_delegation=False
)

# Define the tasks
data_collection_task = Task(
    description="Gather match results, player statistics, and group standings from reliable sources.",
    expected_output='Raw data ready for analysis.',
    agent=sports_expert,
    tools=[SerperDevTool, ScrapeWebsiteTool()]
)

data_analysis_task = Task(
    description="Analyze the collected data to identify trends, standout performances, and critical match outcomes.",
    expected_output='Analyzed data with key insights.',
    agent=news_researcher,
    tools=[FileReadTool(), CSVSearchTool()]
)

daily_summaries_task = Task(
    description="Produce daily summaries highlighting results and key events.",
    expected_output='Daily match summaries.',
    agent=news_researcher,
    tools=[FileReadTool()]
)

feature_articles_task = Task(
    description="Write detailed articles on standout players and tactical analyses.",
    expected_output='In-depth feature articles.',
    agent=news_writer,
    tools=[FileReadTool()]
)

insight_reports_task = Task(
    description="Develop comprehensive reports on emerging trends and strategies.",
    expected_output='Detailed insight reports.',
    agent=news_writer,
    tools=[FileReadTool()]
)

review_and_editing_task = Task(
    description="Review all content for accuracy, engagement, and compliance with editorial standards.",
    expected_output='High-quality, ready-to-publish content.',
    agent=editor,
)

translation_task = Task(
    description="Translate the content into the ideal language.",
    expected_output='High-quality and translated content.',
    agent=translator,
)

publication_distribution_task = Task(
    description="Distribute content across multiple platforms like web, social media, and newsletters.",
    expected_output='Widely distributed content.',
    agent=distribution_manager,
)

# Create the crew
crew = Crew(
    agents=[sports_expert, news_researcher, news_writer, editor, translator, distribution_manager],
    tasks=[
        data_collection_task,
        data_analysis_task,
        daily_summaries_task,
        feature_articles_task,
        insight_reports_task,
        review_and_editing_task,
        translation_task,
        publication_distribution_task
    ],
    process=Process.sequential  # Execute tasks sequentially
  
)

# Start the crew's workflow
result = crew.kickoff()
print(result)